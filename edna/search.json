[
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "Workflow",
    "section": "",
    "text": "Goal: Capture a snapshot of the aquatic community by collecting DNA shed by organisms into the water.\n\n\nCollect surface water using bottles or a bucket.\n\nUse sterile sampling bottles and gloves to avoid contamination.\n\nOptional: record environmental variables (e.g. salinity, temperature, DO)."
  },
  {
    "objectID": "workflow.html#water-collection",
    "href": "workflow.html#water-collection",
    "title": "Workflow",
    "section": "",
    "text": "Goal: Capture a snapshot of the aquatic community by collecting DNA shed by organisms into the water.\n\n\nCollect surface water using bottles or a bucket.\n\nUse sterile sampling bottles and gloves to avoid contamination.\n\nOptional: record environmental variables (e.g. salinity, temperature, DO)."
  },
  {
    "objectID": "workflow.html#filtration",
    "href": "workflow.html#filtration",
    "title": "Workflow",
    "section": "🧪 Filtration",
    "text": "🧪 Filtration\n\nGoal: Concentrate the trace DNA onto a membrane.\n\n\nFilter the water through a filter (e.g. Waterra™) using a peristaltic pump or syringe.\n\nThese filters trap DNA and cell fragments on the internal membrane.\n\nStore filters at -20 °C or lower to preserve DNA integrity."
  },
  {
    "objectID": "workflow.html#dna-extraction",
    "href": "workflow.html#dna-extraction",
    "title": "Workflow",
    "section": "🧬 DNA extraction",
    "text": "🧬 DNA extraction\n\nGoal: Release and purify the DNA from the filters and remove unwanted material.\n\n\nResuspension of the eDNA\n\nRemove the Waterra filters from the freezer in advance and allow them to defrost in the fridge for approximately one hour before extraction.\nClean work area with 25% bleach solution and blue roll.\nFill two 50 mL Falcon tubes (per Waterra) with TE resuspension buffer, making sure to label the tubes with the sample number.\nShake out any residual water from the inlet of the filter. Apply parafilm to cover the smooth outlet of the filter.\nPipette 50 mL of the TE resuspension buffer into the capsule through the ridged inlet and seal with more parafilm.\nAgitate capsule for five minutes.\n\nA fingertip can be placed over each end and the capsule manually shaken, or if parafilm is securely taped into place, the capsule can be held against a vortex.\n\nPour the solution back into the first 50 mL Falcon tube, and repeat steps 5 and 6 for the second 50 mL Falcon tube, ending up with two 50 mL Falcon tubes of eDNA resuspended from the filter in turbid TE buffer.\n\nThe spent Waterra filter can be thrown away.\n\n\n\n\n\n\n\n\nWhat is TE Buffer?\n\n\n\nTE buffer (Tris-EDTA, pH 8.0) is used to gently release DNA from inside the Waterra capsule.\n\nTris or Tris(hydroxymethyl) aminomethane: stabilises pH\n\nMaintaining a stable, slightly alkaline pH is crucial to prevent DNA degradation caused by hydrolysis, which breaks the bonds between nucleotides — the building blocks of DNA.\n\n\n\n\nStructure of DNA (Source: NIH)\n\n\n\nIf pH drops (becomes acidic), DNA is more prone to hydrolytic cleavage — this breaks the bonds between nucleotides and can irreversibly damage the DNA, interfering with downstream steps like PCR and sequencing.\n\nEDTA (Ethylenediaminetetraacetic acid): binds divalent cations (e.g. Mg²⁺, Ca²⁺) to inhibit DNases and protect DNA integrity\n\n\n\n\n\n\n\n\n\nTE Buffer (Tris-EDTA) Recipe – 5 L Total\n\n\n\n\n\n🧾 Ingredients (for 5 L)\n\n250 mL of 1 M Tris-HCl\n→ Final concentration: 50 mM (millimolar)\n100 mL of 0.5 M EDTA\n→ Final concentration: 10 mM (millimolar)\n4,650 mL of ultrapure water\n→ To bring total volume to 5,000 mL (5 L)\n\n\n\n\n🧂 Instructions\n\nIn a clean 5 L glass bottle, add:\n\n250 mL of 1 M Tris-HCl\n100 mL of 0.5 M EDTA\n\nAdd ultrapure water up to the 5 L mark.\nMix thoroughly by gently inverting or stirring.\nLabel with:\n\nContents (e.g. “TE Buffer, pH 8.0”)\nPreparation date\nInitials\n\nStore at room temperature.\n\n\n\n\n\n\nCentrifuging\n\nCentrifuge the two 50 mL Falcon tubes for 10 minutes at 4500 rpm (revolutions per minute, a unit that measures the rotational speed of a centrifuge rotor) to separate debris/sediment from the liquid DNA-containing fraction.\n\nSupernatant: the clear upper layer, containing eDNA in solution\nPellet: the sediment settled at the bottom of the tube\n\n\n\n\nFiltering through funnel filter\n\nAn analytical test filter funnel attached to a Buchner funnel and peristaltic pump is used to filter the buffer mix through a 0.45-micron disc filter (Nalgene™).\nCombine the two Falcon tubes per sample by pouring the now clear supernatant from both tubes through the funnel, trying to retain the sediment in the tubes.\nAdjust the speed of the peristaltic pump to pull the supernatant through the funnel, with an additional minute of filtering to dry the funnel filter disc.\n\nSamples which required multiple filters due to build-up of sediment can be consolidated into one analytical filter funnel.\n\nUpon completion, one funnel filter disc should contain the filtered supernatant, and the remaining sediment should be retained in the original two Falcon tubes.\n\n\n\nQiagen DNeasy PowerWater\n\nFILTER: Remove the upper portion of the disposable filter funnel to expose the white membrane of the filter disc. Using sterile forceps (use 25% bleach solution and rinse with RO water). Roll up the filter membrane with the top side facing inwards, and insert into a 5 mL PowerWater DNA bead tube. Add 1 mL of PW1 solution.\nSEDIMENT: Add 1 mL PW1 solution to one of the Falcon tubes containing sediment. Use the PW1 solution to rinse out the tube into the second Falcon. This sediment in PW1 mixture is then poured into a 5 mL PowerWater DNA bead tube.\n\n\n\n\n\n\n\nBuffer & kit Components\n\n\n\n\nPW1 (lysis buffer): Breaks open cell walls and membranes\n\nLysis: the breakdown of a cell caused by damage to its plasma (outer) membrane\n\nProteinase K: Degrades proteins and DNases that might otherwise destroy DNA\n\nLipids and proteins can act as PCR inhibitors\n\nBeads (inside the bead tube): Provide mechanical disruption during vortexing, especially for tough cell walls (e.g. bacteria, algae)\nQIAshredder column (later step): Removes cellular debris, allowing only the clean lysate to pass through\n\nLysate is the fluid that results from breaking open cells — a mixture that contains all the internal contents of the cells just lysed (broken apart).\nIn DNA extraction:\n\nStart by disrupting the cells (e.g. with Proteinase K and lysis buffers).\nThis releases the DNA into the solution — now called a lysate.\nThe goal is to clean up this lysate to isolate just the DNA, removing all the other cellular “junk”.\n\n\n\n\n\n\n\n\n\n\n\nAdditional notes\n\n\n\n\nAll extractions were carried out in a lateral flow cabinet, regularly sterilised with 25% bleach (dH₂O) to minimise contamination.\nBottles were autoclaved, and all other equipment was sterilised with 50% bleach prior to use.\nAn additional chemical lysis step was incorporated by adding 100 µL Proteinase K and 900 µL PW1 to Eppendorf tubes containing dry filter paper.\nSamples were incubated in a heat block at 56 °C overnight with agitation to promote thorough cell lysis.\nDuring lysis, Waterra disc filters absorbed a large volume of lysate. To recover DNA:\n\nThe soaked filter fragments were transferred into a QIAshredder column\nThe remaining lysate was pooled before proceeding with the DNeasy protocol\n\nA negative control was included in every extraction batch.\nAll extractions and controls were quantified using a Qubit v2 fluorometer with the dsDNA BR Assay Kit (Invitrogen).\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\nThe following materials are required for the resuspension, filtration, and DNA extraction steps:\n\nTE buffer (50 mM Tris, 10 mM EDTA)\n\n50 mL Falcon tubes\n\nParafilm (for sealing filter ends)\n\nBuchner funnel (connected to peristaltic pump)\n\n0.45-micron disc filter (e.g. Nalgene™)\n\nProteinase K (for protein digestion)\n\nQIAshredder (for lysate clean-up)\n\nDNeasy PowerWater Kit (Qiagen)\n\nBlue roll and bleach (for surface decontamination)"
  },
  {
    "objectID": "workflow.html#dna-quantification-qubit",
    "href": "workflow.html#dna-quantification-qubit",
    "title": "Workflow",
    "section": "🔬 DNA quantification (Qubit)",
    "text": "🔬 DNA quantification (Qubit)\n\nGoal: Measures how much double-stranded DNA (dsDNA) there is in the extract.\n\n\nPrepare Qubit working solution:\n\nMix dye and buffer at a 1:200 ratio (e.g. 199 µL buffer + 1 µL dye per sample).\n\nLabel assay tubes for each standard and sample.\nAdd 190 µL of working solution to each tube.\nAdd 10 µL of your DNA sample (or Qubit standard) into each tube.\nVortex gently and incubate at room temperature for 2 minutes (light-sensitive!).\nInsert tubes one at a time into the Qubit and record concentrations (ng/µL).\n\n\n\n\n\n\n\nExpected results\n\n\n\n\n1–10 ng/µL: Ideal concentration range for downstream PCR\n\n&lt;1 ng/µL: May require re-extraction or increased PCR cycles\n\nControls:\n\nPositive control → should show DNA present\n\nNegative control → should read 0 ng/µL or “Not detected”\n\n\n\n\n\n\n\n\n\n\nBuffer & kit Components\n\n\n\nTo convert:\n\nµL → mL: divide by 1,000 (e.g. 200 µL ÷ 1,000 = 0.2 mL)\nmL → µL: multiply by 1,000 (e.g. 1.5 mL × 1,000 = 1,500 µL)"
  },
  {
    "objectID": "workflow.html#pcr-amplification",
    "href": "workflow.html#pcr-amplification",
    "title": "Workflow",
    "section": "📈 PCR amplification",
    "text": "📈 PCR amplification\n\nGoal: To amplify a target DNA barcode region from eDNA extracts to detectable levels using polymerase chain reaction (PCR).\n\n\nPCR targets a short, standardised gene region (a “barcode”) used for species identification.\nFor fish, the 12S rRNA mitochondrial gene is commonly used as a barcode.\nPrimers are short, synthetic DNA sequences (~18–25 base pairs) that define the start and end points of the target region to be amplified.\nThey are custom-designed and ordered from commercial suppliers (e.g. IDT, Eurofins) and are essential for selectively amplifying barcode regions.\nTwo primers are needed:\n\nA forward primer, which binds to one strand at the start of the barcode region (5′→3′ direction).\nA reverse primer, which binds to the opposite strand at the end of the region (also written 5′→3′ but binds in the reverse orientation).\n\nThese primers flank the barcode, allowing DNA polymerase to copy the specific region between them.\nExample Primers (MiFish 12S):\n\nForward primer: GTCGGTAAAACTCGTGCCAGC (MiFish-U-F)\nReverse primer: CATAGTGGGGTATCTAATCCCAGTTTG (MiFish-U-R)\n\nPCR involves repeated thermal cycling:\n\nDenaturation (~94–95 °C): DNA strands are separated into single strands.\nAnnealing (~50–60 °C): Forward and reverse primers bind to their complementary sequences flanking the target barcode.\nSynthesis/Extension (72 °C): DNA polymerase (e.g. Taq) synthesises new DNA strands between the primers.\n\nThis cycle is repeated ~35–40 times. Each cycle doubles the amount of target DNA.\n\nThe result is millions of identical copies (amplicons) of just the barcode region — ready for sequencing.\n\n\n\n\nPCR process\n\n\n\nTypical PCR mix includes:\n\neDNA extract\nForward & reverse primers\nDNA polymerase (e.g. Taq)\ndNTPs (A, T, C, G)\nBuffer\n\nControls:\n\nPositive control: Contains known DNA to confirm amplification\nNegative control: No DNA added — detects contamination\nOptimised annealing temperature: Ensures specific primer binding\n\nAfter PCR, amplicons can be verified using gel electrophoresis before sequencing.\n\n\n\n\n\n\n\nWhat is Taq Polymerase and what does it do?\n\n\n\nTaq polymerase is a DNA polymerase originally isolated from the heat-tolerant bacterium Thermus aquaticus.\n\nIt is heat-stable, meaning it remains active during high-temperature cycles (e.g., 94–95 °C).\nIt is the most widely used enzyme for standard PCR because it:\n\nTolerates repeated heating and cooling\n\nEfficiently synthesises DNA at ~72 °C during the extension step\n\n\nTaq polymerase builds a new strand of DNA by adding nucleotide building blocks (A, T, C, G) to a template strand.\nIt starts at the primer and matches each base with its complement:\n\nA pairs with T\n\nC pairs with G\n\nThis creates a new, complementary strand — essentially copying the original DNA.\n\n\n\n\n🧫 Gel electrophoresis\n\nGoal: To visually confirm successful PCR amplification and screen for contamination.\n\n\nPCR products are loaded into an agarose gel, a porous matrix made from a seaweed-derived polysaccharide.\n\n\n\n\nDNA electrophoresis equipment\n\n\n\nWhen an electric current is applied:\n\nNegatively charged DNA migrates toward the positive electrode\nSmaller fragments move faster through the gel pores\n\nLarger fragments move more slowly\n\nAfter running the gel, DNA is stained with a fluorescent dye (e.g., GelRed or SYBR Safe) and visualised under UV or blue light.\nCompare each sample’s band to a DNA ladder (size marker):\n\n*Clear band at expected size** (e.g., 200–600 bp for 12S): PCR likely succeeded\n\nbp (base pairs): the unit used to measure the length of a DNA fragment.\n1 bp = 1 base pair (A–T or C–G)\n200–600 bp means the DNA fragment is 200 to 600 base pairs long\n\nSmearing or multiple bands: Non-specific amplification or degraded DNA\n*No band**: PCR failed or DNA template was insufficient\n\nControl lanes should show:\n\nPositive control → Band present at expected size\n\nNegative control → No bands (confirms absence of contamination)\n\nSamples → Bands at consistent sizes depending on target gene\n\n\nSetup example\n\n\n\nLane\nContents\n\n\n\n\n1\nHyperladder (size marker)\n\n\n2\nPositive control DNA\n\n\n3\nSample 1\n\n\n4\nSample 2\n\n\n…\n…\n\n\nN\nNegative extraction control\n\n\n\n\n\n\nIllustration showing DNA bands separated on a gel\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\nAgarose gel\nTAE or TBE buffer\n\nMaintain pH (~8.0)\n\nConduct electric current\n\nContain EDTA to inhibit DNases\n\nDNA stain (GelRed or SYBR Safe)\nHyperladder (DNA size marker)\nGel casting tray & comb\nElectrophoresis chamber and power supply\nUV or blue light transilluminator\n\n\n\n\n\n\n📦 Sequencing\n\nGoal: To determine which species are present in the sample by reading the DNA sequences of the amplified barcode regions (produced during PCR).\n\nSteps:\n\nPooling\n\nPCR products (amplicons) from different samples are combined into a single sequencing library — a collective pool of DNA fragments prepared for sequencing.\n\nBarcoding (Indexing)\n\nEach sample is tagged with a unique short DNA sequence (barcode/index).\n→ This allows identification of which sequence came from which sample after sequencing.\n→ The process is known as multiplexing.\n\nSequencing\n\nThe final library is loaded into a high-throughput sequencing platform, typically an Illumina MiSeq.\nIllumina uses a method called sequencing by synthesis:\n\nDNA fragments are copied one base at a time\nAs each base is added, it emits a fluorescent signal:\n\nA = green\n\nT = red\n\nC = blue\n\nG = yellow\n\nA camera records these signals base-by-base as a sequence of coloured flashes\n\nEach sequencing run produces FASTQ files containing:\n\nMillions of short DNA reads (typically 150–300 base pairs)\nQuality scores for each base\nEach read ideally corresponds to a copy of the amplified barcode region (e.g. mitochondrial 12S rRNA for fish).\n\nExample: A read like AGCCTTGAGAACTGCTTAC... might be identified as European seabass through comparison with a reference database.\n\n\n\n\n\n💻 Bioinformatics\n\nGoal: To process and interpret raw DNA sequence data to identify which species were present in each sample.\n\n\nAfter sequencing (e.g. on an Illumina MiSeq), each sample produces FASTQ files — text files containing:\n\nMillions of short DNA reads\nA quality score for each base indicating confidence in base calls\n\nQuality filtering\n\nRemove low-quality reads and unreliable base calls\nTrim off:\n\nResidual primers\n\nAdapter sequences\n\nNoisy bases at the ends\nCommon tools: cutadapt,fastp,Trimmomatic`\n\n\nDenoising & dereplication\n\nThis is where DADA2 plays a central role.\n\n\n\n\n\n\n\n\nWhat is DADA2?\n\n\n\nDADA2 (Divisive Amplicon Denoising Algorithm 2) is an R package that turns raw reads into exact sequences called Amplicon Sequence Variants (ASVs).\nIt models and corrects sequencing errors to recover the true biological sequences present in your samples.\n\n\n\n\n\n\n\nStep\nWhat DADA2 Does\n\n\n\n\nLearn error rates\nBuilds a model of sequencing error patterns\n\n\nDenoise\nCorrects errors and resolves true sequences\n\n\nDereplicate\nMerges identical reads into unique sequences + counts\n\n\nMerge reads\nCombines paired-end reads (forward + reverse)\n\n\nRemove chimeras\nEliminates artificial recombination products from PCR\n\n\nAssign taxonomy\nLabels ASVs using a reference database (e.g. MiFish, GenBank)\n\n\n\n\n\n\nTaxonomic assignment\n\nASVs are matched to known species or genera using a reference database.\nCommon databases:\n\nGenBank – Broad nucleotide database\nMiFish – Fish-specific 12S rRNA barcodes\n\nBOLD – Barcode of Life Data System (especially for COI gene)\n\nMatching tools:\n\nBLAST – Finds the closest match in a database (e.g. ASV AGCCTTGAGAACTGCTTAC... → Dicentrarchus labrax (European seabass), 99.3% identity)\nQIIME2 – End-to-end pipeline with taxonomy plugins (e.g. BLAST, naive Bayes)\n\nMEGAN – Converts BLAST results into taxonomic trees & summaries\n\n\nThis is where anonymous DNA fragments are assigned species names — transforming data into ecological meaning.\n\n\n\n\n\n\n\nTaxonomic assignment using BLAST and BASTA\n\n\n\nBLAST stands for Basic Local Alignment Search Tool.\n\nIt compares your unknown DNA sequence (e.g. an ASV) against a reference database such as GenBank, BOLD, or MiFish to find the most similar known sequences.\nIt reports:\n\n% Identity – How similar your sequence is to the reference\nQuery Coverage – How much of your ASV aligned with the reference\nvalue – The probability the match is random (lower is better)\n\nExample:\n\nASV: AGCCTTGAGAACTGCTTAC… Best match: Dicentrarchus labrax (European seabass)\nResult: 99.3% identity, 98% coverage, E-value = 2e-50\nStrong evidence that this ASV is from European seabass.\n\n\nBASTA stands for BLAST-based Taxonomic Assignment.\n\nBASTA is a tool that builds on BLAST results, providing automated and reproducible taxonomic assignment using the Last Common Ancestor (LCA) approach.\nWhile BLAST gives a list of possible matches, BASTA summarises those hits and assigns the taxonomy based on:\n\nA consensus of the top hits\nUser-defined thresholds for identity and coverage\nLowest common taxonomic rank shared by all top matches (LCA)\nThis helps avoid overly specific or incorrect species assignments.\n\n\nBLAST finds best matching sequences in a database, and BASTA assigns taxonomy using consensus of BLAST hits.\n\n\n\nGenerate an abundance table\n\nThe final step is building a species-by-sample matrix to visualise biodiversity patterns.\n\n\n\n\n\nSpecies\nSample 1\nSample 2\nSample 3\n\n\n\n\nEuropean seabass\n2134\n98\n712\n\n\nThree-spine stickleback\n435\n0\n220\n\n\nGoby spp.\n12\n33\n8\n\n\n\n\nThis process turns millions of anonymous DNA fragments into actionable insights:\n\nWhat species were present?\nWhich sites had higher biodiversity?\nHow did communities change across space or time?"
  },
  {
    "objectID": "workflow.html#gel-electrophoresis",
    "href": "workflow.html#gel-electrophoresis",
    "title": "Workflow",
    "section": "🧫 Gel electrophoresis",
    "text": "🧫 Gel electrophoresis\n\nGoal: To visually confirm successful PCR amplification and screen for contamination.\n\n\nPCR products are loaded into an agarose gel, a porous matrix made from a seaweed-derived polysaccharide.\n\n\n\n\nDNA electrophoresis equipment\n\n\n\nWhen an electric current is applied:\n\nNegatively charged DNA migrates toward the positive electrode\nSmaller fragments move faster through the gel pores\n\nLarger fragments move more slowly\n\nAfter running the gel, DNA is stained with a fluorescent dye (e.g., GelRed or SYBR Safe) and visualised under UV or blue light.\nCompare each sample’s band to a DNA ladder (size marker):\n\n*Clear band at expected size** (e.g., 200–600 bp for 12S): PCR likely succeeded\n\nbp (base pairs): the unit used to measure the length of a DNA fragment.\n1 bp = 1 base pair (A–T or C–G)\n200–600 bp means the DNA fragment is 200 to 600 base pairs long\n\nSmearing or multiple bands: Non-specific amplification or degraded DNA\n*No band**: PCR failed or DNA template was insufficient\n\nControl lanes should show:\n\nPositive control → Band present at expected size\n\nNegative control → No bands (confirms absence of contamination)\n\nSamples → Bands at consistent sizes depending on target gene\n\n\nSetup example\n\n\n\nLane\nContents\n\n\n\n\n1\nHyperladder (size marker)\n\n\n2\nPositive control DNA\n\n\n3\nSample 1\n\n\n4\nSample 2\n\n\n…\n…\n\n\nN\nNegative extraction control\n\n\n\n\n\n\nIllustration showing DNA bands separated on a gel\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\nAgarose gel\nTAE or TBE buffer\n\nMaintain pH (~8.0)\n\nConduct electric current\n\nContain EDTA to inhibit DNases\n\nDNA stain (GelRed or SYBR Safe)\nHyperladder (DNA size marker)\nGel casting tray & comb\nElectrophoresis chamber and power supply\nUV or blue light transilluminator"
  },
  {
    "objectID": "workflow.html#sequencing",
    "href": "workflow.html#sequencing",
    "title": "Workflow",
    "section": "📦 Sequencing",
    "text": "📦 Sequencing\n\nGoal: To determine which species are present in the sample by reading the DNA sequences of the amplified barcode regions (produced during PCR).\n\nSteps:\n\nPooling\n\nPCR products (amplicons) from different samples are combined into a single sequencing library — a collective pool of DNA fragments prepared for sequencing.\n\nBarcoding (Indexing)\n\nEach sample is tagged with a unique short DNA sequence (barcode/index).\n→ This allows identification of which sequence came from which sample after sequencing.\n→ The process is known as multiplexing.\n\nSequencing\n\nThe final library is loaded into a high-throughput sequencing platform, typically an Illumina MiSeq.\nIllumina uses a method called sequencing by synthesis:\n\nDNA fragments are copied one base at a time\nAs each base is added, it emits a fluorescent signal:\n\nA = green\n\nT = red\n\nC = blue\n\nG = yellow\n\nA camera records these signals base-by-base as a sequence of coloured flashes\n\nEach sequencing run produces FASTQ files containing:\n\nMillions of short DNA reads (typically 150–300 base pairs)\nQuality scores for each base\nEach read ideally corresponds to a copy of the amplified barcode region (e.g. mitochondrial 12S rRNA for fish).\n\nExample: A read like AGCCTTGAGAACTGCTTAC... might be identified as European seabass through comparison with a reference database."
  },
  {
    "objectID": "workflow.html#bioinformatics",
    "href": "workflow.html#bioinformatics",
    "title": "Workflow",
    "section": "💻 Bioinformatics",
    "text": "💻 Bioinformatics\n\nGoal: To process and interpret raw DNA sequence data to identify which species were present in each sample.\n\n\nAfter sequencing (e.g. on an Illumina MiSeq), each sample produces FASTQ files — text files containing:\n\nMillions of short DNA reads\nA quality score for each base indicating confidence in base calls\n\nQuality filtering\n\nRemove low-quality reads and unreliable base calls\nTrim off:\n\nResidual primers\n\nAdapter sequences\n\nNoisy bases at the ends\nCommon tools: cutadapt,fastp,Trimmomatic`\n\n\nDenoising & dereplication\n\nThis is where DADA2 plays a central role.\n\n\n\n\n\n\n\n\nWhat is DADA2?\n\n\n\nDADA2 (Divisive Amplicon Denoising Algorithm 2) is an R package that turns raw reads into exact sequences called Amplicon Sequence Variants (ASVs).\nIt models and corrects sequencing errors to recover the true biological sequences present in your samples.\n\n\n\n\n\n\n\nStep\nWhat DADA2 Does\n\n\n\n\nLearn error rates\nBuilds a model of sequencing error patterns\n\n\nDenoise\nCorrects errors and resolves true sequences\n\n\nDereplicate\nMerges identical reads into unique sequences + counts\n\n\nMerge reads\nCombines paired-end reads (forward + reverse)\n\n\nRemove chimeras\nEliminates artificial recombination products from PCR\n\n\nAssign taxonomy\nLabels ASVs using a reference database (e.g. MiFish, GenBank)\n\n\n\n\n\n\nTaxonomic assignment\n\nASVs are matched to known species or genera using a reference database.\nCommon databases:\n\nGenBank – Broad nucleotide database\nMiFish – Fish-specific 12S rRNA barcodes\n\nBOLD – Barcode of Life Data System (especially for COI gene)\n\nMatching tools:\n\nBLAST – Finds the closest match in a database (e.g. ASV AGCCTTGAGAACTGCTTAC... → Dicentrarchus labrax (European seabass), 99.3% identity)\nQIIME2 – End-to-end pipeline with taxonomy plugins (e.g. BLAST, naive Bayes)\n\nMEGAN – Converts BLAST results into taxonomic trees & summaries\n\n\nThis is where anonymous DNA fragments are assigned species names — transforming data into ecological meaning.\n\n\n\n\n\n\n\nTaxonomic assignment using BLAST and BASTA\n\n\n\nBLAST stands for Basic Local Alignment Search Tool.\n\nIt compares your unknown DNA sequence (e.g. an ASV) against a reference database such as GenBank, BOLD, or MiFish to find the most similar known sequences.\nIt reports:\n\n% Identity – How similar your sequence is to the reference\nQuery Coverage – How much of your ASV aligned with the reference\nvalue – The probability the match is random (lower is better)\n\nExample:\n\nASV: AGCCTTGAGAACTGCTTAC… Best match: Dicentrarchus labrax (European seabass)\nResult: 99.3% identity, 98% coverage, E-value = 2e-50\nStrong evidence that this ASV is from European seabass.\n\n\nBASTA stands for BLAST-based Taxonomic Assignment.\n\nBASTA is a tool that builds on BLAST results, providing automated and reproducible taxonomic assignment using the Last Common Ancestor (LCA) approach.\nWhile BLAST gives a list of possible matches, BASTA summarises those hits and assigns the taxonomy based on:\n\nA consensus of the top hits\nUser-defined thresholds for identity and coverage\nLowest common taxonomic rank shared by all top matches (LCA)\nThis helps avoid overly specific or incorrect species assignments.\n\n\nBLAST finds best matching sequences in a database, and BASTA assigns taxonomy using consensus of BLAST hits.\n\n\n\nGenerate an abundance table\n\nThe final step is building a species-by-sample matrix to visualise biodiversity patterns.\n\n\n\n\n\nSpecies\nSample 1\nSample 2\nSample 3\n\n\n\n\nEuropean seabass\n2134\n98\n712\n\n\nThree-spine stickleback\n435\n0\n220\n\n\nGoby spp.\n12\n33\n8\n\n\n\n\nThis process turns millions of anonymous DNA fragments into actionable insights:\n\nWhat species were present?\nWhich sites had higher biodiversity?\nHow did communities change across space or time?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "🧭 Summary: A visual, step-by-step overview of the full workflow\n\n⚗️ Workflow: Detailed methods, protocols, and materials for each stage\n🔬 DADA2: Step-by-step guide to processing eDNA sequence data using the DADA2 pipeline\n\n\n\n\n\neDNA concept (Source: Fishbio)"
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "Home",
    "section": "",
    "text": "🧭 Summary: A visual, step-by-step overview of the full workflow\n\n⚗️ Workflow: Detailed methods, protocols, and materials for each stage\n🔬 DADA2: Step-by-step guide to processing eDNA sequence data using the DADA2 pipeline\n\n\n\n\n\neDNA concept (Source: Fishbio)"
  },
  {
    "objectID": "dada.html",
    "href": "dada.html",
    "title": "DADA2 Pipeline",
    "section": "",
    "text": "Start with paired-end FASTQ files (e.g. sample1_R1.fastq, sample1_R2.fastq)\nFiles must be:\n\nDemultiplexed (split by sample)\nPrimer-trimmed\n\nDADA2 matches forward (R1) and reverse (R2) files automatically by sample name.\n\n\n\n\n\n\n\nWhy forward (R1) and reverse (R2) reads?\n\n\n\nPaired-end sequencing (e.g. Illumina MiSeq) reads both ends of a DNA fragment, generating two FASTQ files per sample:\n\nR1.fastq → Forward read\nR2.fastq → Reverse read\nThe forward read comes from the 5′ end of the top strand\n\nThe reverse read comes from the 5′ end of the bottom strand (reverse complement)\n\nThe two reads may overlap, allowing better reconstruction of the full DNA fragment\n\nDADA2 uses paired-end reads to:\n\nIndependently filter and model errors in each direction\n\nMerge the reads using their overlap to:\n\nCorrect sequencing errors\n\nReconstruct the full barcode (amplicon)\n\nImprove accuracy and resolution\n\n\n\n\n\nFile\nDescription\n\n\n\n\nR1.fastq\nForward reads (5′→3′ of one strand)\n\n\nR2.fastq\nReverse reads (5′→3′ of the other strand)\n\n\n\n→ Both are needed to build full-length, high-quality sequences."
  },
  {
    "objectID": "dada.html#setup-input",
    "href": "dada.html#setup-input",
    "title": "DADA2 Pipeline",
    "section": "",
    "text": "Start with paired-end FASTQ files (e.g. sample1_R1.fastq, sample1_R2.fastq)\nFiles must be:\n\nDemultiplexed (split by sample)\nPrimer-trimmed\n\nDADA2 matches forward (R1) and reverse (R2) files automatically by sample name.\n\n\n\n\n\n\n\nWhy forward (R1) and reverse (R2) reads?\n\n\n\nPaired-end sequencing (e.g. Illumina MiSeq) reads both ends of a DNA fragment, generating two FASTQ files per sample:\n\nR1.fastq → Forward read\nR2.fastq → Reverse read\nThe forward read comes from the 5′ end of the top strand\n\nThe reverse read comes from the 5′ end of the bottom strand (reverse complement)\n\nThe two reads may overlap, allowing better reconstruction of the full DNA fragment\n\nDADA2 uses paired-end reads to:\n\nIndependently filter and model errors in each direction\n\nMerge the reads using their overlap to:\n\nCorrect sequencing errors\n\nReconstruct the full barcode (amplicon)\n\nImprove accuracy and resolution\n\n\n\n\n\nFile\nDescription\n\n\n\n\nR1.fastq\nForward reads (5′→3′ of one strand)\n\n\nR2.fastq\nReverse reads (5′→3′ of the other strand)\n\n\n\n→ Both are needed to build full-length, high-quality sequences."
  },
  {
    "objectID": "dada.html#inspecting-quality",
    "href": "dada.html#inspecting-quality",
    "title": "DADA2 Pipeline",
    "section": "Inspecting quality",
    "text": "Inspecting quality\n\nplotQualityProfile(fwd)\nplotQualityProfile(rev)\n\n\nForward reads: generally good quality\nReverse reads: quality often drops toward the end\nUse this to decide truncation lengths (e.g. 240 bp forward, 160 bp reverse)"
  },
  {
    "objectID": "dada.html#filter-trim",
    "href": "dada.html#filter-trim",
    "title": "DADA2 Pipeline",
    "section": "Filter & trim",
    "text": "Filter & trim\n\nfilterAndTrim(fwd, filtF,\n              rev, filtR,\n              truncLen = c(240,160),\n              maxN = 0,\n              maxEE = c(2,2),\n              truncQ = 2,\n              rm.phix = TRUE,\n              compress = TRUE,\n              multithread = TRUE)\n\n\nRemoves poor-quality and ambiguous reads\nDrops PhiX contaminants\nOutputs retained read counts per sample\n\n\n\n\n\n\n\nWhat is PhiX and why is it removed?\n\n\n\nPhiX (or PhiX174) is a small viral genome often added as a control during Illumina sequencing runs.\n\nIt helps calibrate the sequencer and improve performance in low-diversity samples (like amplicon-based eDNA).\nIt’s not part of your actual biological sample, so it needs to be filtered out.\n\nIn DADA2, this is done automatically:\n\nrm.phix = TRUE"
  },
  {
    "objectID": "dada.html#learn-error-rates",
    "href": "dada.html#learn-error-rates",
    "title": "DADA2 Pipeline",
    "section": "Learn error rates",
    "text": "Learn error rates\n\nerrF &lt;- learnErrors(filtFs, multithread = TRUE)\nerrR &lt;- learnErrors(filtRs, multithread = TRUE)\n\n\nBuilds a parametric error model from observed data\nSeparately for forward and reverse reads"
  },
  {
    "objectID": "dada.html#denoise-sample-inference",
    "href": "dada.html#denoise-sample-inference",
    "title": "DADA2 Pipeline",
    "section": "Denoise / Sample inference",
    "text": "Denoise / Sample inference\n\ndadaFs &lt;- dada(filtFs, err = errF, multithread = TRUE)\ndadaRs &lt;- dada(filtRs, err = errR, multithread = TRUE)\n\n\nInfers ASVs (Amplicon Sequence Variants)\nCorrects sequencing errors to identify true biological sequences"
  },
  {
    "objectID": "dada.html#merge-paired-reads",
    "href": "dada.html#merge-paired-reads",
    "title": "DADA2 Pipeline",
    "section": "Merge paired reads",
    "text": "Merge paired reads\n\nmergers &lt;- mergePairs(dadaFs, filtFs, dadaRs, filtRs)\n\n\nMerges forward and reverse reads\nRequires overlap (e.g., ≥12 bp) and agreement in the overlap region"
  },
  {
    "objectID": "dada.html#build-sequence-table",
    "href": "dada.html#build-sequence-table",
    "title": "DADA2 Pipeline",
    "section": "Build sequence table",
    "text": "Build sequence table\n\nseqtab &lt;- makeSequenceTable(mergers)\n\n\nRows = samples\nColumns = ASVs\nCells = read counts"
  },
  {
    "objectID": "dada.html#chimera-removal",
    "href": "dada.html#chimera-removal",
    "title": "DADA2 Pipeline",
    "section": "Chimera removal",
    "text": "Chimera removal\n\nseqtab.nochim &lt;- removeBimeraDenovo(seqtab, method = \"consensus\", multithread = TRUE)\n\n\nRemoves PCR artifacts (chimeras)\nYields a cleaned-up ASV table\n\n\n\n\n\n\n\nWhat are chimeras and why remove them?\n\n\n\nChimeras are artificial DNA sequences created during PCR amplification.\n\nThey form when a partially extended DNA strand from one template accidentally binds to a different, but similar, template in the next PCR cycle.\nThis creates a hybrid sequence that does not exist in any real organism.\n\nThese artefacts:\n\nAre common in amplicon-based workflows.\nCan inflate biodiversity estimates or lead to false species detections."
  },
  {
    "objectID": "dada.html#track-read-loss",
    "href": "dada.html#track-read-loss",
    "title": "DADA2 Pipeline",
    "section": "Track read loss",
    "text": "Track read loss\n\ngetN &lt;- function(x) sum(getUniques(x))\ntrack &lt;- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))\ncolnames(track) &lt;- c(\"input\", \"filtered\", \"denoisedF\", \"denoisedR\", \"merged\", \"nonchim\")\n\n\nMonitors how many reads pass each step\nHelps catch major data loss or pipeline issues"
  },
  {
    "objectID": "dada.html#assign-taxonomy",
    "href": "dada.html#assign-taxonomy",
    "title": "DADA2 Pipeline",
    "section": "Assign taxonomy",
    "text": "Assign taxonomy\n\ntaxa &lt;- assignTaxonomy(seqtab.nochim, \"silva_nr_v138_train_set.fa.gz\", multithread = TRUE)\ntaxa &lt;- addSpecies(taxa, \"silva_species_assignment_v138.fa.gz\")\n\n\nClassifies ASVs by comparing to a reference database (e.g., SILVA)\nAdds species-level IDs for exact matches"
  },
  {
    "objectID": "dada.html#optional-species-level-matching",
    "href": "dada.html#optional-species-level-matching",
    "title": "DADA2 Pipeline",
    "section": "Optional: Species-level matching",
    "text": "Optional: Species-level matching\n\nUse curated references like MiFish for fish-specific identification\nAlternatives:\n\nBLAST for manual species checks\nDECIPHER’s IdTaxa() function"
  },
  {
    "objectID": "dada.html#validate-with-mock-community",
    "href": "dada.html#validate-with-mock-community",
    "title": "DADA2 Pipeline",
    "section": "Validate with mock community",
    "text": "Validate with mock community\n\nRun pipeline on a known “mock” sample\nShould recover expected species with high accuracy"
  },
  {
    "objectID": "dada.html#export-to-phyloseq",
    "href": "dada.html#export-to-phyloseq",
    "title": "DADA2 Pipeline",
    "section": "Export to phyloseq",
    "text": "Export to phyloseq\n\nlibrary(phyloseq)\nps &lt;- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),\n               tax_table(taxa),\n               sample_data(metadata))\n\n\nEnables diversity analysis, ordination, visualisation"
  },
  {
    "objectID": "dada.html#summary-flow",
    "href": "dada.html#summary-flow",
    "title": "DADA2 Pipeline",
    "section": "Summary flow",
    "text": "Summary flow\n\n\n\nStep\nAction\n\n\n\n\n1\nImport FASTQ files\n\n\n2\nVisualise quality\n\n\n3\nFilter & trim reads\n\n\n4\nLearn error rates\n\n\n5\nInfer ASVs (denoise)\n\n\n6\nMerge paired reads\n\n\n7\nBuild sequence table\n\n\n8\nRemove chimeras\n\n\n9\nTrack read retention\n\n\n10\nAssign taxonomy\n\n\n11\nOptional: species matching\n\n\n12\nValidate with known samples\n\n\n13\nExport to phyloseq"
  },
  {
    "objectID": "dada.html#example-code",
    "href": "dada.html#example-code",
    "title": "DADA2 Pipeline",
    "section": "Example code",
    "text": "Example code\n\n# Load necessary libraries\nlibrary(dada2)\nlibrary(phyloseq)\nlibrary(Biostrings)\nlibrary(ggplot2)\n\n# File set up\npath &lt;- \"MiSeq_SOP\"\nlist.files(path)\n\n# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq\nfnFs &lt;- sort(list.files(path, pattern=\"_R1_001.fastq\", full.names = TRUE))\nfnRs &lt;- sort(list.files(path, pattern=\"_R2_001.fastq\", full.names = TRUE))\n\n# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq\nsample.names &lt;- sapply(strsplit(basename(fnFs), \"_\"), `[`, 1)\n\n# Inspect quality\nplotQualityProfile(fnFs[1:2])\nplotQualityProfile(fnRs[1:2])\n\n# Filter & trim\nfiltFs &lt;- file.path(path, \"filtered\", basename(fnFs))\nfiltRs &lt;- file.path(path, \"filtered\", basename(fnRs))\nout &lt;- filterAndTrim(fnFs, filtFs, fnRs, filtRs,\n                     truncLen=c(240,200), maxN=0, maxEE=c(2,2),\n                     truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=FALSE)\nhead(out)\n\n# Learn error rates\nerrF &lt;- learnErrors(filtFs, multithread=FALSE)\nerrR &lt;- learnErrors(filtRs, multithread=FALSE)\nplotErrors(errF, nominalQ=TRUE)\n\n# Dereplicate\nderepFs &lt;- derepFastq(filtFs, verbose=TRUE)\nderepRs &lt;- derepFastq(filtRs, verbose=TRUE)\n\n# DADA denoising\ndadaFs &lt;- dada(derepFs, err=errF, multithread=FALSE)\ndadaRs &lt;- dada(derepRs, err=errR, multithread=FALSE)\n\n# Merge paired reads\nmergers &lt;- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)\n\n# Create ASV table\nseqtab &lt;- makeSequenceTable(mergers)\ndim(seqtab)\ntable(nchar(getSequences(seqtab)))\n\n# Remove chimeras\nseqtab.nochim &lt;- removeBimeraDenovo(seqtab, method=\"consensus\",\n                                    multithread=FALSE, verbose=TRUE)\nsum(seqtab.nochim)/sum(seqtab)\n\n# Track reads through pipeline\ngetN &lt;- function(x) sum(getUniques(x))\ntrack &lt;- data.frame(\n  input=out[,1],\n  filtered=out[,2],\n  denoisedF=sapply(dadaFs, getN),\n  denoisedR=sapply(dadaRs, getN),\n  merged=sapply(mergers, getN),\n  nonchim=rowSums(seqtab.nochim)\n)\nrownames(track) &lt;- sample.names &lt;- sapply(strsplit(basename(fnFs), \"_\"), `[`, 1)\nprint(track)\n\n# Taxonomic assignment (using Silva v138 trained classifier)\ntaxa &lt;- assignTaxonomy(seqtab.nochim, \"silva_nr_v138_train_set.fa.gz\", multithread=FALSE)\nprint(head(taxa))\n\n# Removing sequence rownames for display only\ntaxa.print &lt;- taxa\nrownames(taxa.print) &lt;- NULL\nhead(taxa.print)\n\n# Evaluate accuracy\nrownames(seqtab.nochim)\nsample.names &lt;- sapply(strsplit(rownames(seqtab.nochim), \"_\"), `[`, 1)\nrownames(seqtab.nochim) &lt;- sample.names\n\nunqs.mock &lt;- seqtab.nochim[\"Mock\",]\nunqs.mock &lt;- sort(unqs.mock[unqs.mock&gt;0], decreasing=TRUE) # Drop ASVs absent in the Mock\ncat(\"DADA2 inferred\", length(unqs.mock), \"sample sequences present in the Mock community.\\n\")\n\n# Load expected reference sequences for the Mock community\nmock.ref &lt;- getSequences(file.path(path, \"HMP_MOCK.v35.fasta\"))\nmatch.ref &lt;- sum(sapply(names(unqs.mock), function(x) any(grepl(x, mock.ref))))\ncat(\"Of those,\", sum(match.ref), \"were exact matches to the expected reference sequences.\\n\")\n\n######\n\ntheme_set(theme_bw())\n\nsamples.out &lt;- rownames(seqtab.nochim)\nsubject &lt;- sapply(strsplit(samples.out, \"D\"), `[`, 1)\ngender &lt;- substr(subject,1,1)\nsubject &lt;- substr(subject,2,999)\nday &lt;- as.integer(sapply(strsplit(samples.out, \"D\"), `[`, 2))\nsamdf &lt;- data.frame(Subject=subject, Gender=gender, Day=day)\nsamdf$When &lt;- \"Early\"\nsamdf$When[samdf$Day&gt;100] &lt;- \"Late\"\nrownames(samdf) &lt;- samples.out\n\nps &lt;- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), \n               sample_data(samdf), \n               tax_table(taxa))\nps &lt;- prune_samples(sample_names(ps) != \"Mock\", ps) # Remove mock sample\n\ndna &lt;- Biostrings::DNAStringSet(taxa_names(ps))\nnames(dna) &lt;- taxa_names(ps)\nps &lt;- merge_phyloseq(ps, dna)\ntaxa_names(ps) &lt;- paste0(\"ASV\", seq(ntaxa(ps)))\nps\n\n# Alpha diversity\nplot_richness(ps, x=\"Day\", measures=c(\"Shannon\", \"Simpson\"), color=\"When\")\n\n# Beta diversity\nps.prop &lt;- transform_sample_counts(ps, function(otu) otu/sum(otu))\nord.nmds.bray &lt;- ordinate(ps.prop, method=\"NMDS\", distance=\"bray\")\n\nplot_ordination(ps.prop, ord.nmds.bray, color=\"When\", title=\"Bray NMDS\")\n\ntop20 &lt;- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]\nps.top20 &lt;- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))\nps.top20 &lt;- prune_taxa(top20, ps.top20)\nplot_bar(ps.top20, x=\"Day\", fill=\"Family\") + facet_wrap(~When, scales=\"free_x\")"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "💧 Water collection\n→ Collect environmental water samples using sterile techniques.\n🧪 Filtration\n→ Pass water through membrane filters to capture suspended DNA (eDNA) from the environment.\n🧬 DNA extraction\n→ Isolate DNA from the filters using a commercial extraction kit (e.g. Qiagen DNeasy).\n🔬 DNA quantification (Qubit)\n→ Measure DNA concentration to assess extraction success and ensure enough material for PCR.\n📈 PCR Amplification\n→ Use primers to target and amplify a barcode gene (e.g. mitochondrial 12S rRNA) via thermal cycling.\n🧫 Gel electrophoresis\n→ Run PCR products on an agarose gel to check for successful amplification and absence of contamination.\n📦 Sequencing\n→ Pool PCR amplicons, add sample-specific barcodes (indexes), and sequence using a platform like Illumina MiSeq.\n💻 Bioinformatics\n→ Demultiplex, quality-filter, and assign taxonomy to sequence data using a bioinformatics pipeline (e.g. DADA2)."
  }
]